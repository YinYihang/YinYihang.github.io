<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Posts tagged github</title>
    <link href="https://xinitrc.de/tags/github.xml" rel="self" />
    <link href="https://xinitrc.de" />
    <id>https://xinitrc.de/tags/github.xml</id>
    <author>
        <name>Aaron Yee</name>
        <email>yinyhmail@gmail.com</email>
    </author>
    <updated>2015-05-30T00:00:00Z</updated>
    <entry>
    <title>Github page + Hexo ，独立博客我们来了</title>
    <link href="https://xinitrc.de/blog/2015/05/30/hexo-github.html" />
    <id>https://xinitrc.de/blog/2015/05/30/hexo-github.html</id>
    <published>2015-05-30T00:00:00Z</published>
    <updated>2015-05-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>How to build a personal blog based on Github page + Hexo by free ?</p>
<!--more-->
<p>忽然萌生了要写博客的想法，折腾了一天，总算搭配好了环境。这篇文章并不是很详细的教程，但作为一个刚刚实践过的人，我会把我搭配过程中遇到的种种问题在这里讲解出来，希望能对一些同学有所帮助。当然，我同样会在文章中给出实现过程中参考的blog，一知半解的同学可以进行参考。</p>
<p>先说一下我的搭配环境，并没有购买独立域名，而是采用了Github为Github page所分配的二级域名，所以对于想拥有独立blog而又想free of charge的话，那么接着看下去。</p>
<section id="准备工作what-we-need" class="level3">
<h3>准备工作，What we need？</h3>
<hr />
<ul>
<li><a href="https://github.com/">Github 账户</a></li>
<li><a href="https://msysgit.github.io/">Git Shell，windows环境下我使用了Git bash</a></li>
<li><a href="https://nodejs.org/">Node.js</a></li>
<li>文本编辑器，windows下推荐<a href="https://notepad-plus-plus.org/">Notepad++</a> &amp; <a href="http://www.sublimetext.com/">Sublime</a></li>
</ul>
</section>
<section id="创建与配置github" class="level3">
<h3>创建与配置Github</h3>
<hr />
<p>注册Github的过程这里不再多说，不明白的同学可以参考<a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>一文。</p>
</section>
<section id="配置ssh-key" class="level2">
<h2>#### 配置SSH key</h2>
<p>老实的讲，我还并没有搞懂SSH key的作用。Someone say 是为了建立local与remote的联系，但是如果不手动配置SSH key，github系统同样会为我们默认生成一个。但为了避免出错，我们还是按部就班的做吧，生命在于折腾。。下面的部分参考<a href="http://beiyuu.com/github-pages/">BeiYuu’s blog</a>。</p>
<p><strong>现在已经明白配置 SSH key 的作用，如果不配置 SSH key，我们每次上传文件至 remote 端的话都需要输入用户名和密码，而配置了 SSH key 之后，我们每次只需要填入设置的密码即可。</strong></p>
<p>首先，检查电脑上现有的ssh key，文件存放位置通常在 <strong>“C: .ssh”</strong> 文件夹中。</p>
<p>然后，生成新的ssh key，在git bash中输入下列命令：</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ssh-keygen</span> -t rsa -C <span class="st">&quot;邮件地址@youremail.com&quot;</span>
<span class="kw">Generating</span> public/private rsa key pair.
<span class="kw">Enter</span> file in which to save the key (/Users/your_user_directory/.ssh/id_rsa)<span class="kw">:</span>  Click ENTER</code></pre></div>
<p>点击回车后，系统会要求输入密码串：</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">Enter</span> passphrase (empty for no passphrase)<span class="kw">:</span>
<span class="kw">Enter</span> same passphrase again:</code></pre></div>
<p>输入两次密码，看到下图后，标明ssh key设置成功。 <img src="/assets/images/hexogit/sshkeyset.png" alt="" /></p>
<p>接下来，添加ssh key到Github端。打开<strong>“C: .ssh”</strong> 文件夹中<strong>“id_rsa.pub”</strong>文件，可使用notepad++或者sublime文本编辑模式，复制全部内容。登陆Github账户后，点击右上角粉红色按钮，选择settings。 <img src="/assets/images/hexogit/setting.png" alt="" /></p>
<p>进入<strong>personal settings</strong>，选择<strong>SSH keys</strong>，点击<strong>Add SSH key</strong>，将复制的内容粘贴到key中，单击<strong>Add key</strong>即可完成添加。 <img src="/assets/images/hexogit/sshsetting.png" alt="" /></p>
<p>在git bash中输入以下命令，测试是否添加成功。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ssh</span> -T git@github.com
<span class="kw">Enter</span> passphrase for key <span class="st">&#39;/c/Users/Limbo/.ssh/id_rsa&#39;</span>:
<span class="kw">Hi</span> ! You<span class="st">&#39;ve successfully authenticated, but Github does not provide shell access.</span></code></pre></div>
</section>
<section id="创建github-page" class="level2">
<h2>#### 创建Github page</h2>
<p>首先登陆Github账户，然后我们便可以创建我们的blog主页了（其实本质上就是一个仓库repository）。点击右上角加号create new repository，如下图所示， <img src="/assets/images/hexogit/createRepo.png" alt="" /> Repository name请填入<code>ownername.github.io</code>，必须注意的是，<strong>Repository name必须与Owner名字一致</strong>。例如此处对于我来说，需填入<code>AaronYee.github.io</code>。其他项不需调整，点击create repository完成创建。</p>
<p>接下来测试一下，引用<a href="https://pages.github.com/">Github page</a>官方主页的例子，首先打开git bash进入工作目录（任意指定），clone下我们刚刚在github端创建好的repository，命令如下： <img src="/assets/images/hexogit/gitclone.png" alt="" /></p>
<p>将其中的<strong>username</strong>那么替换为你的<strong>github name</strong>即可，也可以从repository页面找到clone地址，在github端进入指定repository， <img src="/assets/images/hexogit/repository.png" alt="" /> 点击右侧Copy to clipboard即可复制URL地址。其他选项如上图所示的Clone in Desktop和Download ZIP也同样可以使用。</p>
<p>然后进入本地clone下的repository文件夹，并创建html文件，如下图所示： <img src="/assets/images/hexogit/createhtml.png" alt="" /></p>
<p>Go on，将编辑好的文件上传回Github服务器端。命令如下所示： <img src="/assets/images/hexogit/gitadd.png" alt="" /></p>
<p>关于Git命令这里不再过多阐述，可参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a>，<a href="http://git-scm.com/book/zh/v1">Pro Git</a>。</p>
<p>提交成功后，可打开浏览器地址栏输入 <strong>http://username.github.io</strong> （username替换为你的repository name）查看是否可以显示出刚才所设置的html文件内容，若成功显示，则证明Github page搭建成功。第一次通常会有一些<strong>延时</strong>，请耐心等待10分钟左右时间。另外请注意，github的<strong>邮箱验证</strong>可能会影响到Github page的搭建，请及时验证邮箱。</p>
<p><strong>Okay，至此，Github端环境搭建完成。</strong></p>
</section>
<section id="安装hexo" class="level2">
<h2>### 安装Hexo</h2>
<p>在安装Node.js的过程中，<strong>请不要修改默认的安装路径</strong>，因为涉及到环境变量的配置问题。成功安装Node.js与Git bash后，在Git bash中输入下述命令即可安装hexo。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">npm</span> install -g hexo-cli</code></pre></div>
<p>注意，如果在Git bash中提示<code>npm command not found</code>，请切换到windows command中进行安装。</p>
<p>hexo安装完成后，可以创建我们用于写blog的文件夹了，anywhere you want。创建好后，在git bash中输入如下命令，其中<code>&lt;folder&gt;</code>为我们刚刚所创建的文件夹。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">hexo</span> init <span class="kw">&lt;</span>folder<span class="kw">&gt;</span>      // Initialization，初始化
$ <span class="kw">cd</span> <span class="kw">&lt;</span>folder<span class="kw">&gt;</span>
$ <span class="kw">npm</span> install             // 安装插件</code></pre></div>
<p>打开我们刚刚所建立的文件夹，会发现其中多出了很多内容，这些便是hexo所依赖的信息，具体内容如下所示：</p>
<pre><code>.
├── _config.yml        // 配置文件
├── package.json       // 应用程序的信息
├── scaffolds          // 模板文件夹
├── scripts            // 脚本文件夹
├── source             // 资源文件夹
|   ├── _drafts
|   └── _posts
└── themes             // 主题文件夹</code></pre>
<p>因为我们在写博客的时候，编辑的文件是<strong>“.md”</strong>文件，而在部署到blog的时候，需要生成为<strong>html</strong>文件，这个过程可由下述过程完成。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">hexo</span> generate        // 最新版本的hexo支持简化形式，即 hexo g</code></pre></div>
<p>执行上述命令后，在我们的blog文件夹中会自动生成一个public文件夹，这个文件夹的内容即是我们需要部署到blog服务器端的内容。接下来，输入下述命令开启本地服务器。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">hexo</span> server        // 最新版本的hexo支持简化形式，即 hexo s</code></pre></div>
<p>打开浏览器，地址栏中输入<strong>“http://localhost:4000”</strong>，若弹出下列界面，则证明配置成功。 <img src="/assets/images/hexogit/sample.png" alt="" /></p>
<p>现在我们已经完成了本地端的配置，那么接下来<strong>怎样将我们本地写好的blog挂载到服务器上呢</strong>？So easy，用我们上文配置好的<strong>Github page</strong>，这就相当于将我们本地写好的文件上传到Github repository中，然后便可以在Github page下浏览到我们在本地写好的blog了。</p>
<p>上传的过程，我们可以将public文件夹中的所有内容复制到clone下的repository文件夹中，并通过git命令上传。但是，hexo已经帮我们集成好了这个操作。我们只需要配置好环境，便可以实现一键部署。首先，打开我们创建的blog文件夹下，用文本编辑器打开<code>_config.yml</code>文件，在最下方找到<strong>Deployment</strong>选项，将其配置成如下的形式即可。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># Deployment</span>
<span class="co">## Docs: http://hexo.io/docs/deployment.html</span>
<span class="kw">deploy</span>:
  <span class="kw">type</span>: git
  <span class="kw">repo</span>: https://github.com/username/username.github.io.git
  <span class="kw">branch</span>: master</code></pre></div>
<p>其中的<strong>username</strong>替换为个人的<strong>repository name</strong>。配置完成后，我们即可通过命令一键将所写的内容部署到服务器端。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">hexo</span> deploy       // 最新版本的hexo支持简化形式，即 hexo d </code></pre></div>
<p>部署过程中会要求我们输入github的用户名和密码，正确输入即可。部署成功后，再次打开浏览器，进入我们上文搞定的Github page界面，<strong>http://username.github.io</strong>，即可看到我们本地写好的文件已经可以成功访问了！</p>
<p>当我们想新写一篇博客的时候，在git bash改变到blog目录的情况下，输入以下命令</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">hexo</span> new [layout] <span class="kw">&lt;</span>title<span class="kw">&gt;</span>       //  layout默认使用_config.yml中的default_layout参数代替，此处可以为空。</code></pre></div>
<p>即可发现<code>./source/_posts</code>文件夹中多出了一个<code>&lt;title&gt;.md</code>文件，使用文本编辑器编辑该文件，按照MarkDown语法格式，即可完成blog的编写。</p>
</section>
<section id="配置hexo" class="level2">
<h2>### 配置Hexo</h2>
<p>Hexo的配置文件集中在主目录下的<code>_config.yml</code>文件中，下面贴出个人的配置文件和注释，可以根据个人的需要进行修改。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># Hexo Configuration</span>
<span class="co">## Docs: http://hexo.io/docs/configuration.html</span>
<span class="co">## Source: https://github.com/hexojs/hexo/</span>

<span class="co"># Site</span>
<span class="kw">title</span>: Aaron-Yee Blog                       // 网站标题
<span class="kw">subtitle</span>: 专注 <span class="kw">&amp;</span> 沉淀                        <span class="kw">//</span> 网站副标题
<span class="kw">description</span>:                                // 网站描述
<span class="kw">author</span>: Aaron Yee                           // 作者名字
<span class="kw">language</span>: zh-CN                             // 网站使用的语言
<span class="kw">timezone</span>:

<span class="co"># URL</span>
<span class="co">## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;</span>
<span class="kw">url</span>: http://yoursite.com
<span class="kw">root</span>: /
<span class="kw">about_dir</span>: about
<span class="kw">tag_dir</span>: tags
<span class="kw">category_dir</span>: categories
<span class="kw">permalink</span>: :year/:month/:day/:title/
<span class="kw">permalink_defaults</span>:

<span class="co"># Directory                                 // 目录</span>
<span class="kw">source_dir</span>: source                          // 资源文件夹，用来存放内容
<span class="kw">public_dir</span>: public                          // 公共文件夹，用于存放生成的站点文件
<span class="kw">tag_dir</span>: tags                               // 标签文件夹
<span class="kw">archive_dir</span>: archives                       // 归档文件夹
<span class="kw">category_dir</span>: categories                    // 分类文件夹
<span class="kw">code_dir</span>: downloads/code                    // include code 文件夹
<span class="kw">i18n_dir</span>: :lang                             // 国际化(i18n)文件夹
<span class="kw">skip_render</span>:                                // 跳过指定文件的渲染

<span class="co"># Writing                                   // 设置hexo new 时候的相关配置</span>
<span class="kw">new_post_name</span>: :title.md                    // 新文章文件名称 <span class="co"># File name of new posts                </span>
<span class="kw">default_layout</span>: post                        // 预设布局
<span class="kw">titlecase</span>: false                            // 把标题转换为title case <span class="co"># Transform title into titlecase</span>
<span class="kw">external_link</span>: true                         // 在新标签中打开链接 <span class="co"># Open external links in new tab</span>
<span class="kw">filename_case</span>: 0                            // 把文件名称转换为(1)小写或<span class="kw">(2)</span>大写
<span class="kw">render_drafts</span>: false                        // 显示草稿
<span class="kw">post_asset_folder</span>: false                    // 启动Asset文件夹
<span class="kw">relative_link</span>: false                        // 把链接改为与根目录的相对位置
<span class="kw">future</span>: true                                // 显示未来的文章
<span class="kw">highlight</span>:                                  // 代码块设置
  <span class="kw">enable</span>: true
  <span class="kw">line_number</span>: true
  <span class="kw">auto_detect</span>: true
  <span class="kw">tab_replace</span>:

<span class="co"># Category &amp; Tag                            // 分类 &amp; 标签</span>
<span class="kw">default_category</span>: uncategorized
<span class="kw">category_map</span>:
<span class="kw">tag_map</span>:

<span class="co"># Date / Time format</span>
<span class="co">## Hexo uses Moment.js to parse and display date</span>
<span class="co">## You can customize the date format as defined in</span>
<span class="co">## http://momentjs.com/docs/#/displaying/format/</span>
<span class="kw">date_format</span>: YYYY-MM-DD
<span class="kw">time_format</span>: HH:mm:ss

<span class="co"># Pagination</span>
<span class="co">## Set per_page to 0 to disable pagination</span>
<span class="kw">per_page</span>: 10
<span class="kw">pagination_dir</span>: page

<span class="co"># Extensions</span>
<span class="co">## Plugins: http://hexo.io/plugins/</span>
<span class="co">## Themes: http://hexo.io/themes/</span>
<span class="kw">theme</span>: jacman                              // 主题名称

<span class="co"># Deployment                               // 自动部署的配置</span>
<span class="co">## Docs: http://hexo.io/docs/deployment.html</span>
<span class="kw">deploy</span>:
  <span class="kw">type</span>: git
  <span class="kw">repo</span>: https://github.com/AaronYee/AaronYee.github.io.git
  <span class="kw">branch</span>: master</code></pre></div>
<p>更多关于Hexo的信息可以在<a href="http://hexo.io/zh-cn/">hexo</a>中查看。</p>
</section>
<section id="更换hexo主题" class="level2">
<h2>### 更换Hexo主题</h2>
<p>很显然，玩blog，主题是很重要的一个方面，那么怎么样<strong>更换Hexo的主题</strong>呢？本文以<strong>jacman</strong>主题为例，下文转自<a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/">Jack’s Blog，如何使用Jacman主题</a>。</p>
<p>首先，使用Git bash进入本机的blog根目录，然后执行以下命令。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> clone https://github.com/wuchong/jacman.git themes/jacman</code></pre></div>
<p>Jacman 需要安装 Hexo 2.7 及以上版本，请先升级您的 Hexo 程序，再启用此主题。</p>
<p>然后，修改根目录下的<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>jacman</code>。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># Extensions</span>
<span class="co">## Plugins: http://hexo.io/plugins/</span>
<span class="co">## Themes: http://hexo.io/themes/</span>
<span class="kw">theme</span>: jacman                              // 主题名称</code></pre></div>
<p>然后更新主题</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">cd</span> themes/jacman
<span class="kw">git</span> pull origin master</code></pre></div>
<p>jacman主题提供了丰富的属性配置，可根据个人需要修改配置文件。详情请参考<a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/">Jack’s Blog，如何使用Jacman主题</a>。</p>
<p>更多关于hexo的主题，可参考<a href="https://github.com/hexojs/hexo/wiki/themes">Github Hexo Themes</a>，<a href="http://www.zhihu.com/question/24422335">知乎，有哪些好看的hexo主题</a>等等。</p>
</section>
<section id="总结" class="level2">
<h2>### 总结</h2>
<p>总结一下实践过程中遇到的几个问题，希望能对后来的同学有所帮助。</p>
<ul>
<li><strong>Q. 上传本地repository到github端时，执行命令<code>git remote add origin</code>时出现 fatal: remote origin already exists 错误。</strong> &gt; 请先执行命令<code>git remote rm origin</code>，然后再重新添加。</li>
<li><strong>Q. 上传本地repository到github端时，执行命令<code>git push origin master</code>时出现 error: failed to push som refs to… 错误。</strong> &gt; 可执行命令 <code>git pull origin master</code> 将远程文件拉下来再push。</li>
<li><strong>Q. 打开<code>http://localhost:4000</code>只看到一堆代码，并没有预想中的网页出现。</strong> &gt; 这可能是由于hexo并没有对网页代码进行动态解析，请在git bash的blog根目录下重新输入<code>npm install</code>生成依赖的插件包。</li>
<li><strong>Q. 打开<code>username.github.io</code>的时候，并没有显示出于本地server浏览同样的效果。</strong> &gt; 有部分原因可能是Github有延迟的原因，请稍后再试。若还是出现问题，请细心检查配置文件<code>_config.yml</code>。</li>
<li><strong>Q. 使用Jacman主题，修改配置文件后并没有出现预想的效果。</strong> &gt; 注意修改配置文件时，<code>_config.yml</code>文件中的每个属性值前必须留一个空格。请务必注意缩进问题，尽量保持与原文档格式一致，相应项对齐。</li>
<li><strong>Q. Blog内容中想加入配图，图片文件应该放在哪个文件夹中。</strong> &gt; Markdown插入图片的格式为<code>![](图片地址){ImgCap}图片标题{/ImgCap}</code>，外部链接图片直接在图片地址中填入，本地图片可在本地blog根目录的<code>./source/</code>文件夹中新建一个文件夹images用来存放图片，然后插入图片时图片地址为<code>/imgages/Fig1.png</code>。</li>
</ul>
<div class="references">

</div>
</section>]]></summary>
</entry>

</feed>
